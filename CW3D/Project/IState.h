#pragma once

#include "Input.h"


class CPlayer;

namespace Sample
{

	//キー
	using StateKeyType = std::string;

	//前方定義
	class IStateMachine;
	using StateMachineWeakPtr = std::weak_ptr<IStateMachine>;

	//ステートインタフェース
	class IState
	{
		//ステートマシンからのみ登録ができる様にfriend指定
		friend class StateMachine;
	protected:
		/**
		 * @brief		ステートマシン登録
		 */
		virtual void SetStateMachine(StateMachineWeakPtr machine) = 0;

		/**
		 * @brief		入力登録
		 */
		virtual void SetInput(InputPtr input) = 0;
	public:
		/**
		 * @brief		デストラクタ
		 */
		virtual ~IState() = default;

		/**
		 * @brief		アクション内の開始処理
		 */
		virtual void Start(CPlayer * player) = 0;

		/**
		 * @brief		アクション内の実行処理
		 */
		virtual void Execution(CPlayer * player) = 0;

		/**
		 * @brief		ステート内の入力処理
		 */
		virtual void InputExecution(CPlayer * player) = 0;

		/**
		 * @brief		アクション内の終了処理
		 */
		virtual void End(CPlayer * player) = 0;

		/**
		 * @brief		ステート内の接触イベント
		 * @param[in]	type		当たった相手のタイプ
		 * @param[in]	obj			当たった相手のオブジェクト
		 */
		virtual void CollisionEvent(CPlayer* player, unsigned int type, std::any obj) = 0;

		/**
		 * @brief		ステートの変更
		 * @param[in]	key			ステートキー
		 * @return		true		成功
		 *				false		失敗
		 */
		virtual bool ChangeState(CPlayer * player, const StateKeyType & key) = 0;

		/**
		 * @brief		ステート名の取得
		 */
		virtual const StateKeyType GetKey() const = 0;
	};
	//ポインタ置き換え
	using StatePtr = std::shared_ptr<IState>;
}
